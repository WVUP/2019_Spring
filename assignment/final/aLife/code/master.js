const baseUrl = 'https://pokeapi.co/api/v2/';

let pkmnList = []; // full pkmn list
let pkmnTypes = []; // list of types
let moves = []; // list of moves
let currentMoves = [];
let currentStats = [];
let builtPkmn = []; // pkmn that have been generated by user already, onclick event listener will check this list first... eventually.
let currentPkmn;

let pkmnListDiv = document.getElementById("pkmnList");
let pkmnPic = document.getElementById("terminalScreen");
let pkmnStats = document.getElementById("statSection");
let moveset = document.getElementById("scrollingMoveset");
let type1 = document.getElementById("leftType").getElementsByTagName("p")[0];
let type2 = document.getElementById("rightType").getElementsByTagName("p")[0];
let idBox = document.getElementById("pkmnIdBox");
let downId = document.getElementById("downId");
let upId = document.getElementById("upId");
let pkmnName = document.getElementById("pkmnName");

pkmnListDiv.innerHTML = "Loading Pokemon";

function fetchPkmn() {
    fetch(baseUrl + 'pokedex/1/')
        .then(res => res.json())
        .then(data => {
            for (let i = 0; i < data.pokemon_entries.length; i++) {
                pkmnList.push({
                    ID: data.pokemon_entries[i].entry_number,
                    NAME: data.pokemon_entries[i].pokemon_species.name,
                    PKMNURL: data.pokemon_entries[i].pokemon_species.url
                });
            }
            pkmnListDiv.innerHTML = "";
            for (let i = 0; i < pkmnList.length; i++) {
                pkmnListDiv.innerHTML += `<p id="${pkmnList[i].NAME}">${pkmnList[i].NAME}</p>`;
            }
            //console.log(pkmnList);
        });
}

function fetchTypes() {
    fetch(baseUrl + 'type/')
        .then(res => res.json())
        .then(data => {
            for (let i = 0; i < data.results.length; i++) {
                pkmnTypes.push({
                    TYPE: data.results[i].name,
                    TYPEURL: data.results[i].url
                });
            }
            //console.log(pkmnTypes);
        });
    //console.log(moves);
}

function fetchMoves() {
    fetch(baseUrl + 'move/')
        .then(res => res.json())
        .then(data => {
            let num = data.count;
            fetch(baseUrl + 'move?offset=0&limit=' + num)
                .then(res => res.json())
                .then(data => {
                    for (let i = 0; i < num; i++) {
                        fetch(data.results[i].url)
                            .then(res => res.json())
                            .then(data => {
                                moves.push({
                                    NAME: data.name,
                                    TYPE: data.type.name,
                                    POWER: data.power
                                });
                            });
                    }
                });
        });
}

function getCurrPkmnMoves(pkmn, data) {
    moveset.innerHTML = "";
    currentMoves = [];
    for (let i = 0; i < data.moves.length; i++) {
        let move = moves.find(name => name.NAME === data.moves[i].move.name);
        moveset.innerHTML +=
            `
                <div class="row">
                    <div class="col-sm-5 offset-1">${move.NAME}</div>
                    <div class="col-sm-2">${move.TYPE}</div>
                    <div class="col-sm-1" style="text-align: right;">${move.POWER != null ? move.POWER : ""}</div>
                </div>
            `
        currentMoves.push({
            NAME: move.NAME,
            TYPE: move.TYPE,
            POWER: move.POWER
        });
    }
    return currentMoves;
}

function getCurrPkmnStats(pkmn, data) {
    currentStats = [];
    statSection.innerHTML =
        `
        <div class="col-sm-6">${data.stats[5].stat.name}: ${data.stats[5].base_stat}</div>
        <div class="col-sm-6">${data.stats[4].stat.name}: ${data.stats[4].base_stat}</div>
        <div class="col-sm-6">${data.stats[3].stat.name}: ${data.stats[3].base_stat}</div>
        <div class="col-sm-6">${data.stats[2].stat.name}: ${data.stats[2].base_stat}</div>
        <div class="col-sm-6">${data.stats[1].stat.name}: ${data.stats[1].base_stat}</div>
        <div class="col-sm-6">${data.stats[0].stat.name}: ${data.stats[0].base_stat}</div>
    `
    currentStats.push({
            STAT: data.stats[5].stat.name,
            VALUE: data.stats[5].base_stat
        }, {
            STAT: data.stats[4].stat.name,
            VALUE: data.stats[4].base_stat
        }, {
            STAT: data.stats[3].stat.name,
            VALUE: data.stats[3].base_stat
        }, {
            STAT: data.stats[2].stat.name,
            VALUE: data.stats[2].base_stat
        }, {
            STAT: data.stats[1].stat.name,
            VALUE: data.stats[1].base_stat
        }, {
            STAT: data.stats[0].stat.name,
            VALUE: data.stats[0].base_stat
        },

    );
    return currentStats;
}

function getPkmn(x) {
    console.log("running in getPkmn(new pkmn)");
    let pkmn = pkmnList.find(pkmn => pkmn.NAME === x);

    fetch(baseUrl + 'pokemon/' + pkmn.ID + '/')
        .then(res => res.json())
        .then(data => {
            //console.log(data);
            pkmn.TYPE1 = data.types[0].type.name;
            pkmn.TYPE2 = data.types.length > 1 ? data.types[1].type.name : "";
            pkmn.SPRITES = data.sprites;
            type1.innerHTML = pkmn.TYPE1;
            type2.innerHTML = pkmn.TYPE2;
            idBox.innerHTML = pkmn.ID;
            terminalScreen.innerHTML =
                `
                <img src="${data.sprites.front_default}">
                `
            pkmn.STATS = getCurrPkmnStats(pkmn, data);
            pkmn.MOVES = getCurrPkmnMoves(pkmn, data);
        });
    return pkmn
}

function selectNewPkmn(x) {
    const regex = new RegExp(".*" + pkmnName.value + ".*");
    let count = pkmnList.filter(pkmn => pkmn.NAME.match(regex)).length;
    for (let i = 0; i < count; i++) {
        document.getElementById(pkmnList.filter(pkmn => pkmn.NAME.match(regex))[i].NAME).classList.contains("pkmn") ? 
        document.getElementById(pkmnList.filter(pkmn => pkmn.NAME.match(regex))[i].NAME).classList.remove("pkmn") : "";
    }
    document.getElementById(x).classList.add("pkmn");
    pkmnListDiv.classList.remove("pkmn");
    currentPkmn = x;
}

function buildNewPkmn(x) {
    selectNewPkmn(x);

    pkmn = getPkmn(x);

    builtPkmn.find(i => i.NAME === x) ? "" : builtPkmn.push(pkmn);
}

function preBuiltPkmn(pkmn) {
    console.log("running in preBuiltPkmn()");
    selectNewPkmn(pkmn.NAME);
    moveset.innerHTML = "";
    terminalScreen.innerHTML =
        `
        <img src="${pkmn.SPRITES.front_default}">
        `;
    statSection.innerHTML =
        `
        <div class="col-sm-6">${pkmn.STATS[0].STAT}: ${pkmn.STATS[0].VALUE}</div>
        <div class="col-sm-6">${pkmn.STATS[1].STAT}: ${pkmn.STATS[1].VALUE}</div>
        <div class="col-sm-6">${pkmn.STATS[2].STAT}: ${pkmn.STATS[2].VALUE}</div>
        <div class="col-sm-6">${pkmn.STATS[3].STAT}: ${pkmn.STATS[3].VALUE}</div>
        <div class="col-sm-6">${pkmn.STATS[4].STAT}: ${pkmn.STATS[4].VALUE}</div>
        <div class="col-sm-6">${pkmn.STATS[5].STAT}: ${pkmn.STATS[5].VALUE}</div>
        `;

    //console.log(pkmn.MOVES);
    for (let i = 0; i < pkmn.MOVES.length; i++) {
        moveset.innerHTML +=
            `
            <div class="row">
                <div class="col-sm-5 offset-1">${pkmn.MOVES[i].NAME}</div>
                <div class="col-sm-2">${pkmn.MOVES[i].TYPE}</div>
                <div class="col-sm-1" style="text-align: right;">${pkmn.MOVES[i].POWER != null ? pkmn.MOVES[i].POWER : ""}</div>
            </div>
            `;
    }
}

function filterPkmn(){
    const regex = new RegExp(".*" + pkmnName.value + ".*");
    let count = pkmnList.filter(pkmn => pkmn.NAME.match(regex)).length;
    pkmnListDiv.innerHTML = "";
    for (let i = 0; i < count; i++) {
        pkmnListDiv.innerHTML += `<p id="${pkmnList.filter(pkmn => pkmn.NAME.match(regex))[i].NAME}">${
            pkmnList.filter(pkmn => pkmn.NAME.match(regex))[i].NAME}</p>`;
    }
}

pkmnName.addEventListener("keyup", function(){filterPkmn()});

pkmnListDiv.addEventListener("click", function () {
    var x = event.target.id;
    //console.log(pkmnList.find(pkmn => pkmn.NAME === x));
    let pkmn = builtPkmn.find(pkmn => pkmn.NAME === x);
    pkmn != null ? preBuiltPkmn(pkmn) : buildNewPkmn(x);
});

downId.addEventListener("click", function(){
    let i = pkmnList.indexOf(pkmnList.find(pkmn => pkmn.NAME === currentPkmn));
    buildNewPkmn(pkmnList[i - 1].NAME);
    selectNewPkmn(pkmnList[i - 1].NAME);
});

upId.addEventListener("click", function(){
    let i = pkmnList.indexOf(pkmnList.find(pkmn => pkmn.NAME === currentPkmn));
    buildNewPkmn(pkmnList[i + 1].NAME);
    selectNewPkmn(pkmnList[i + 1].NAME);
});


fetchPkmn();
fetchTypes();
fetchMoves();

// Add in next pkmn and previous pkmn functions to gray arrow buttons. ----- Highly annoying part.

// Add in filter functionality to type.
// Add in filter functionality to name. ---- done
// Add in clear filters to yellow arrow button.

// Hopeful 1; Add class to big blue button to highlight on hover, on click stay highlighted and change pkmn to shiny version.
// Hopeful 1; When selecting new pkmn from list (selectNewPkmn(x)) remove shiny class.
// Hopeful 1; When shiny selected, run function to update img to shiny.

// Hopeful 2; add in front/back view via d-pad.